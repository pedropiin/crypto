4.1.1) O DES foi um padrão de criptografia feito pela IBM,
e alterado posteriormente em junção com órgãos estatais 
estadunidenses. Assim, foi a cifra padrão em diversas 
aplicações e sistemas por múltiplos anos, até que ataques
de força bruta começaram a se tornar menos custosos e práticos.
Em cerca de um pouco mais de 10 anos, grupos já estavam 
construindo peças de hardware montadas com o objetivo de 
quebrar o DES. 
Desse modo, órgãos estatais dos EUA iniciaram um "concurso"
em busca de uma nova cifra que pudesse ser utilizada como
novo padrão. Após alguns anos, e algumas submissões 
analizadas, chegaram a conclusão que a cifra Rijndael era a 
melhor, e passaram a utiliza-lá com o nome de AES, mais 
especificamente sua versão de 128 bits. Portanto, desde 2002,
AES é uma das principais cifras utilizadas em diversas aplicações,
e também, e a cifra padrão oficial do governo estadunidense 
para arquivos TOP SECRET. Até hoje, mesmo com mais de 20 anos
de estudo, não descobriram nenhum ataque mais eficiente do que 
um ataque de brute-force, que para 128 bits, é, atualmente,
extremamente caro, demorado e inviável, tornando-a, então, 
segura até os dias de hoje.

4.1.2) Assim como falado acima, DES já não era mais seguro,
sendo necessário apenas algumas horas para quebrar qualquer
objeto cifrado por esse algoritmo. Então iniciou-se um concurso
de submissões de novos designs e algoritmos para cifras.

4.1.3) O algoritmo é chamado de Rijndael.

4.1.4) Uma dupla de criptólogos belgas, chamados John Daemen 
e Vincent Rijmen.

4.1.5) O Rijndael suporta blocos e chaves de 128, 192 e 256 bits.
Porém o AES foi e é estabelecido como o Rijndael de 128 bits.


4.2)
+ | 0 1 2 3 4 5 6           * | 0 1 2 3 4 5 6
0 | 0 1 2 3 4 5 6           0 | 0 0 0 0 0 0 0
1 | 1 2 3 4 5 6 0           1 | 0 1 2 3 4 5 6
2 | 2 3 4 5 6 0 1           2 | 0 2 4 6 1 3 5
3 | 3 4 5 6 0 1 2           3 | 0 3 6 2 5 1 4
4 | 4 5 6 0 1 2 3           4 | 0 4 1 5 2 6 3
5 | 5 6 0 1 2 3 4           5 | 0 5 3 1 6 4 2
6 | 6 0 1 2 3 4 5           6 | 0 6 5 4 3 2 1

4.3)
*      |   0   |   1   |   x   |  x+1  |  x^2  | x^2+1 | x^2+x |x^2+x+1|
0      |   0   |   0   |   0   |   0   |   0   |   0   |   0   |   0   |
1      |   0   |   1   |   x   |  x+1  |  x^2  | x^2+1 | x^2+x |x^2+x+1|
x      |   0   |   x   |  x^2  | x^2+x |  x+1  |   1   |x^2+x+1| x^2+1 |
x+1    |   0   |  x+1  | x^2+x | x^2+1 |x^2+x+1|  x^2  |   1   |   x   |
x^2    |   0   |  x^2  |  x+1  |x^2+x+1| x^2+x |   x   | x^2+1 |   1   |
x^2+1  |   0   | x^2+1 |   1   |  x^2  |   x   |x^2+x+1|  x+1  | x^2+x |
X^2+x  |   0   | x^2+x |x^2+x+1|   1   | x^2+1 |  x+1  |   x   |  x^2  |
x^2+x+1|   0   |x^2+x+1| x^2+1 |   x   |   1   | x^2+x |  x^2  |  x+1  |

4.4.1) A(x) + B(x) = x^2 + 1 + x^3 + x^2 + 1 = x^3

4.4.2) A(x) + B(x) = x^2 + 1 + x + 1 = x^2 + x
Portanto, nota-se que o polinômio de redução não afeta em nada
a operação de soma.

4.5.1) A(x) * B(x) = (x^2 + 1) * (x^3 + x^2 + 1) =
        = (x^5 + x^4 + x^2 + x^3 + x^2 + 1) = 
        = (x^5 + x^4 + x^3 + 1) =
        = (x^2 + x + x + 1 + x^3 + 1) mod P(X) = 
        = (x^3 + x^2) mod P(x)

4.5.2) A(x) * B(x) = (x^2 + 1) * (x + 1) =
        = (x^3 + x^2 + x + 1) mod P(x)
Portanto, nota-se que, diferentemente da operação de soma, 
o polinômio de redução permite que os resultados do produto
no corpo de extensão de Galois sejam ainda elementos do mesmo.

4.6) (x^4 + x + 1) / (x^7 + x^6 + x^3 + x^2) =
    = (x^4 + x + 1) * (x^7 + x^6 + x^3 + x^2)^-1 = 
    = (x^4 + x + 1) * (x^5 + x^4 + x^3 + x^2 + 1) = 
    = (x^9 + x^8 + x^7 + x^6 + x^4 + x^6 + x^5 + x^4 + x^3 + x + x^5 + x^4 + x^3 + x^2 + 1) = 
    = (x^9 + x^8 + x^7 + 2x^6 + 2x^5 + 3x^4 + 2x^3 + x^2 + x + 1) = 
    = (x^9 + x^8 + x^7 + x^4 + x^2 + x + 1) = 
    = (x^5 + x^4 + x^2 + x + x^4 + x^3 + x + 1 + x^7 + x^4 + x^2 + x + 1) mod P(X) = 
    = (x^7 + x^5 + 3x^4 + x^3 + 2x^2 + 3x + 2) mod P(x) = 
    = (x^7 + x^5 + x^4 + x~3 + x) mod P(X)

4.8.1)
x^3 + 1
x^3 + x + 1
x^3 + x^2 + 1
x^3 + x^2 + x + 1

4.8.2)
x^4 + 1
x^4 + x + 1
x^4 + x^2 + 1
x^4 + x^2 + x + 1
x^4 + x^3 + x^2 + 1
x^4 + x^3 + x^2 + x + 1

4.9) 
I = 1111111111...111 (len=128) = FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF (len=32)
State Matrix A:
        FF | FF | FF | FF
        FF | FF | FF | FF
        FF | FF | FF | FF
        FF | FF | FF | FF
Ai = FF
S(Ai) = 0x16 = 0b00010110
State Matrix S(A):
        16 | 16 | 16 | 16
        16 | 16 | 16 | 16
        16 | 16 | 16 | 16
        16 | 16 | 16 | 16
State Matrix ShiftRow:
        16 | 16 | 16 | 16
        16 | 16 | 16 | 16
        16 | 16 | 16 | 16
        16 | 16 | 16 | 16
MixColumn Sublayer:
(C0) = (02 | 03 | 01 | 01) * (0x16)
(C1) = (01 | 02 | 03 | 01) * (0x16)
(C2) = (01 | 01 | 02 | 03) * (0x16)
(C3) = (03 | 01 | 01 | 02) * (0x16)
____________
        16 | 16 | 16 | 16
        16 | 16 | 16 | 16
        16 | 16 | 16 | 16
        16 | 16 | 16 | 16

Key Schedule:
K = 111111...111 (len=128) = FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
W[0] = W[1] = W[2] = W[3] = FFFFFFFF (len=8)

W[4] = W[0] ^ g(W[3]) = FFFFFFFF ^ g(W[3])
g(W[3]): = g(FFFFFFFF) = 17161616

Portanto, W[4] = FFFFFFFF ^ 17161616 = E8E9E9E9
W[5] = W[4] ^ W[1] = E8E9E9E9 ^ FFFFFFFF = 17161616
W[6] = W[5] ^ W[2] = 17161616 ^ FFFFFFFF = E8E9E9E9
W[7] = W[6] ^ W[3] = E8E9E9E9 ^ FFFFFFFF = 17161616

Assim:
Output = 16161616161616161616161616161616 ^ E8E9E9E917161616E8E9E9E917161616
Output = FEFFFFFF01000000FEFFFFFF01000000

4.10.1) 
(Utilizando Cryptool)
Input = 01000000 00000000 00000000 00000000
Key = 2b7e1516 28aed2a6 abf71588 09cf4f3c
W[0:3] = 2b7e1516 28aed2a6 abf71588 09cf4f3c
W[4:7] = a0fafe17 88542cb1 23a33939 2a6c7605

Input Round1 = 2a7e1516 28aed2a6 abf71588 09cf4f3c

Byte Substituion = e5f35947 34e4b524 626859c4 018a84eb

ShiftRows = e5e459eb 34688447 628a5924 01f3b5c4

MixColumn = 54369544 1334863e 3ca2363d 7dfcd4d6

Output = f4cc6b53 9b60aa8f 1f010f04 5790a2d3

4.10.2)
(Utilizando Cryptool)
Input = 00000000 00000000 00000000 00000000
Key = 2b7e1516 28aed2a6 abf71588 09cf4f3c
W[0:3] = 2b7e1516 28aed2a6 abf71588 09cf4f3c
W[4:7] = a0fafe17 88542cb1 23a33939 2a6c7605

Input Round1 = 2b7e1516 28aed2a6 abf71588 09cf4f3c

Byte Substituion = f1f35947 34e4b524 626859c4 018a84eb

ShiftRows = f1e459eb 34688447 628a5924 01f3b5c4

MixColumn = 7c228178 1334863e 3ca2363d 7dfcd4d6

Output = dcd87f6f 9b60aa8f 1f010f04 5790a2d3

4.10.3) Nota-se que 32 bits foram alterados, em apenas um round,
com apenas a mudança de um bit no input. Assim, ao longo dos 
próximos 9 rounds, muito mais bits passaram por alteração, exemplificando
o processo de difusão do AES.

4.11.1)
d1 = 1 * (b7*x⁷ + ... + b0) = b7*x⁷ + b6x⁶ + b5*x⁵ + b4*x⁴ + b3*x³ + b2*x² + b1*x + b0

4.11.2)
d2 = x * (b7*x⁷ + ... + b0) = b7*x⁸ + b6*x⁷ + ... + b0*x

P(x) = x⁸ + x⁴ + x³ + x + 1 ==> x⁸ = x⁴ + x³ + x + 1

d2 = (x⁴ + x³ + x + 1)*b7 + x⁷*b6 + x*b0 =
   = x⁷*b6 + x⁶*b5 + x⁵*b4 + x⁴*(b3+b7) + x³*(b2+b7) + x² + x(b0+b7) + b7

4.11.3)
d3 = (x + 1) * (b7*x⁷ + ... + b0) = d1 + d2 = 
   = x⁷*(b6+b7) + x⁶(b5+b6) + x⁵(b4+b5) + x⁴(b3+b4+b7) + x³(b2+b3+b7) + x²(b1+b2) + x(b0+b1+b7) + b0 + b7

4.12.1)
Considerando que o enunciado só pergunta sobre as somas
da multiplicação, temos que:
- para d1, temos 7 somas, portanto, 7 portas lógicas XOR
- para d2, temos 10 somas, portanto, 10 portas lógicas XOR
- para d3, temos 18 somas, portanto, 18 portas lógicas XOR

4.12.2)
Nessa etapa do AES, temos como resultado um vetor de 4 bytes.
Cada byte desse resultado depende de 2*d1 + 1*d2 + 1*d3. Para mais,
temos que d1 necessita de 7 somas, d2 de 10 e d3 de 18, sendo 
equivalente a um total de 42 somas. Porém, nota-se que a soma 
entre d1 e d2, por exemplo, não equivale a apenas uma soma, e
sim a uma soma de polinômios de grau (no máximo) 7, ou seja, 
8 somas por si só. No total, para cada byte do resultado, necessitamos,
portanto, de 8*3 + 42 = 66 somas. Como temos 4 bytes para serem 
gerados, temos um total de 264 somas, ou 264 portas XOR.

4.12.3)
A camada de difusão é composta pela etapa de ByteSubstitution e pela
MixColumn. Porém, a primeira é, basicamente, uma permutação em bytes,
e, como o enunciado assume que permutações não necessitam de portas
lógicas extras, necessitamos apenas das associadas à segunda etapa.
Calculamos no exercício anterior que uma parcela dessa etapa para 4
bytes necessita de 264 portas XOR. Tendo em mente que, para o AES, 
precisamos de 4 dessas parcelas, nos permitindo chegar a um custo total
de 1056 portas lógicas XOR.

4.13.1)
(29)ₕₑₓ⁻¹ = (0a)ₕₑₓ
(f3)ₕₑₓ⁻¹ = (34)ₕₑₓ
(01)ₕₑₓ⁻¹ = (01)ₕₑₓ

4.14.1)
(29)ₕₑₓ⁻¹ = (0a)ₕₑₓ
AF(0a) = (1 1 0 0 0 1 1 0) + (0 1 1 0 0 0 1 1) mod2 = (1 0 1 0 0 1 0 1) = S(29)

(f3)ₕₑₓ⁻¹ = (34)ₕₑₓ
AF(34) = (0 1 1 0 1 1 1 0) + (0 1 1 0 0 0 1 1) mod2 = (0 0 0 0 1 1 0 1) = S(0d)

(01)ₕₑₓ⁻¹ = (01)ₕₑₓ
AF(01) = (0 0 0 1 1 1 1 1) + (0 1 1 0 0 0 1 1) mod2 = (0 1 1 1 1 1 0 0) = S(01)

4.13.0)
S(0) = (63)ₕₑₓ