2.1.1) A key stream equivale ao conjunto {0, 1, 2, ..., 25}, no qual cada número
representa uma letra do alfabeto, ou seja, {A, B, C, ..., Z}. Assim, as funções seriam:
Encryption: yi = Esi(xi) = (xi + si) mod26
Decryption: xi = Dsi(yi) = (yi + si) mod26
2.1.2) 
cyphertext = "bsaspp kkuosp"
key = "rsidpy dkawoa"
plaintext = "skiven nuukgp"
2.1.3) ????

2.2) Por mais que impossível de ser quebrado, OTP não é um sistema prático. Assim como apresentado
no livro, caso precisássemos criptografar algo de 1GB, teríamos que ter uma chave do mesmo tamanho, 
capaz de ser transportada de forma segura até o receptor da mensagem criptograda. Além desse sistema
de transporte ser inviável por si só, caso fosse necessário encriptar múltiplas vezes, o transporte
teria que ser feito também múltiplas vezes. Além do mais, dependeríamos de TRNG's, de modo a utilizar
cada bit apenas uma vez. Então, toda vez que fossemos encriptar algo novo, teríamos que gerar novamente
uma chave de 1Gb de forma 100% aleatória, para então transportá-la ao receptor. Todo esse processo
teria que ser feito para cada encripção desejada.

2.3) Muito provavelmente, um ataque de brute-force não seria tão eficiente, pois teriam o keyspace é de 128bits,
necessitando, portanto, de 2^128 operações. Porém, conhecendo apenas 128 bits do plaintext, um atacante consegue
facilmente pegar o cyphertext, descobrir qual é a keystream, e, consequentemente, descriptar todo o resto do arquivo.

2.4) Por mais que um computador tenha potencia suficiente, uma OTP é inquebrável, pois, assim como 
apresentado no livro, cada bit encriptado depende de duas variáveis: o bit do plaintext e o bits da
key stream. Assim, sem saber nada do processo de encripção, cada bit do plaintext tem exatamente
a mesma chance de assumir o valor 0 ou 1. Para mais, mesmo que o atacante chute corretamente o valor, 
por depender de uma operação XOR, o valor do bit da key stream continua desconhecido, sendo necessário
mais um chute, já que também possui exatamente 50% de chance de assumir qualquer valor. Assim, cada bit
cifrado possui 4 cenários igualmente possíveis para o seu processo de formação, sendo impossível prever
o comportamento e aumentando muito o número de operações para um brute-force-attack.

2.5) Sm = Sm-1 * Cm-1 + ... + S0 * C0 mod2
2.5.1)
clk FF2 FF1 FF0=si
0   1   0   0      
1   1   1   0
2   1   1   1
3   0   1   1
4   1   0   1
5   0   1   0
6   0   0   1
7   1   0   0
8   1   1   0
9   1   1   1
10  0   1   1
...
...
...

Portanto, LFSR com grau m = 3, (c2 = 1, c1 = 0, c0 = 1) e IV = (s2 = 1, s1 = 0, s0 = 0) gera a sequência:
    0011101
2.5.2)
clk FF2 FF1 FF0=si
0   0   1   1
1   1   0   1
2   0   1   0
3   0   0   1
4   1   0   0
5   1   1   0
6   1   1   1
7   0   1   1
8   1   0   1
9   0   1   0
...
...
...

Portanto, LFSR com grau m = 3, (c2 = 1, c1 = 0, c0 = 1) e IV = (s2 = 0, s1 = 1, s0 = 1) gera a sequência:
    1101001
2.5.3) Nota-se que a ambas estão relacionadas apenas por um shift de 3 bits para a esquerda (ou 4 bits para
a direita). Percebe-se também que essa sequência utilizada para o "feedback path" permite que o LFST atinja
o tamanho máximo de sua sequência, isto é, 2^m - 1 = 7.

2.6) Para atacar facil e eficientemente a stream cypher, Oscar precisa saber 2m bits de plaintext e cyphertext.
Sabendo que o período é de 150-200 bits, temos que o LFSR (Linear Feedback Shift Register) em questão tem, no 
mínimo, grau 8, já que qualquer outro grau abaixo desse não conseguiria gerar uma sequência aperiódica do 
tamanho apresentado. Assim, Oscar precisa conhecer apenas, no caso mínimo, 16 bits de plaintext e 16 bits de 
cyphertext, ou seja, apenas 2 caracteres ASCII de cada. Com isso em mãos, sabe-se que um bit da key stream 
é gerado pela equação do formato: Sm = Sm-1 * Pm-1 + ... S0 * P0 mod2 (eq1), e que Si = Xi + Yi mod2 (eq2). 
Como Oscar conhece 16 bits, ele consegue gerar os 16 primeiros bits da key stream pela eq2., e, consequentemente,
gerar 8 equações do formato da eq1, isto é, o suficiente para resolver o sistema de 8 variáveis Pi. 
Assim, com os coeficientes do "feedback path" em mãos e os primeiros bits da key stream, Oscar consegue gerar
todos os seguintes bits, de modo a permiti-lo decifrar todo o arquivo.

2.7) 
Polinomio primitivo = (0, 1, 3, 4, 8) = x^8 + x^4 + x^3 + x + 1 => Feedback path = (p7 = 0, p6 = 0, p5 = 0, p4 = 1, p3 = 1, p2 = 0, p1 =1, p0 = 1)
=> Sm = Sm-1 * p7 + ... S0 * p0 mod2

IV = FF(16) = 255(10) = 11111111(2)
=> S8 = s7*p7 + s6*p6 + s5*p5 + s4*p4 + s3*p3 + s2*p2 + s1*p1 + s0*p0 mod2 = 1*0 + 1*0 + 1*0 + 1*1 + 1*1 + 1*0 + 1*1 + 1*1 mod2 = 0
=> S9 = s8*p7 + s7*p6 + s6*p5 + s5*p4 + s4*p3 + s3*p2 + s2*p1 + s1*p0 mod2 = 0*0 + 1*0 + 1*0 + 1*1 + 1*1 + 1*0 + 1*1 + 1*1 mod2 = 0

2.9.1) São necessários 512bits de plaintext e de cyphertext, ou seja, um par de 512bits de cada um dos "arquivos".
2.9.2) Já feito na 2.6
2.9.3) A chave em um LFSR (Linear Feedback Shift Register) consiste nos valores do "feedback path", ou seja, os 
valores que vão realizar um XOR com cada si gerado por cada flip-flop. 
Se usássemos os valores iniciais do flip-flop como chave, os bits gerados seriam facilmente previsíveis. Isso, pois 
realizando um XOR entre eles, se temos um número par de '1' nos bits, geraríamos um '0', diminuindo o número de '1'
em um. Consequentemente, na próxima iteração, teríamos um número ímpar de '1' nos bits, gerando um novo '1', reiniciando
o ciclo. Caso usássemos os bits juntamente a outros fatores como chave, aumentaríamos a segurança e a imprevisibilidade
do sistema, mas ainda sim não extrairíamos o máximo possível de segurança, isto é, quando temos um "feedback path" 
baseado em um polinômio primitivo.

2.10.1)
Plaintext =  1001 0010 0110 1101 1001 0010 0110
Cyphertext = 1011 1100 0011 0001 0010 1011 0001
Keystream =  0010 1110 0101 1100 1011 1001 0111
Nota-se que a keystream tem um período de 7 bits. Portanto, temos que 2^m - 1 = 7 => m = 3.
2.10.2)