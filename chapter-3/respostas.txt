3.1.1) 
x1 = 000000 => linha 00 = 0 e coluna 0000 = 0 => S1(x1) = 14 = 1110
x2 = 000001 => linha 01 = 1 e coluna 0000 = 0 => S1(x2) = 00 = 0000
S1(x1) xor S1(x2) = 1110 xor 0000 = 1110
S1(x1 xor x2) = S1(000000 xor 000001) = S1(000001) = 0000

3.1.2)
x1 = 111111 => linha 11 = 3 e coluna 1111 = 15 => S1(x1) = 13 = 1101
x2 = 100000 => linha 10 = 2 e coluna 0000 = 0 => S1(x2) = 04 = 0100
S1(x1) xor S1(x2) = 1101 xor 0100 = 1001
S1(x1 xor x2) = S1(111111 xor 100000) = S1(011111) = 08 = 1000

3.1.3)
x1 = 101010 => linha 10 = 2 e coluna 0101 = 5 => S1(x1) = 06 = 0110
x2 = 010101 => linha 01 = 1 e coluna 1010 = 10 => S1(x2) = 12 = 1100
S1(x1) xor S1(x2) = 0110 xor 1100 = 1010
S1(x1 xor x2) = S1(101010 xor 010101) = S1(111111) = 13 = 1101

3.2) x = (x1, x2, x3, x4, x5, ..., x64) => IP(x) = (x58, x50, x42, x34, x26, ..., x7)
Por IP, temos que o bit 1 foi mapeado para pos 40
                        2                      8
                        3                      48
                        4                      16
                        5                      56
Na tabela de IP^-1, vemos que o bit 40 foi mapeado para a posição 1. Porém, 
nota-se que após IP, o bit 40 equivale ao bit 1 inicial. O mesmo raciocínio 
se aplica para os bits seguintes: bit 2 foi para a posição 8, e em IP^-1,
o bit 8 é mapeado para a pos 2, e assim segue.

3.3) x = (0, 0, 0,..., 0) (len = 64)
IP(x) = (0, 0, 0,..., 0) (len = 64)

Key Schedule:
k = (0, 0, 0,..., 0) (len = 64)
PC-1(k) = (0, 0, 0, ..., 0) (len = 56)
C0 = (0, 0, 0, ..., 0) = D0 = (0, 0, 0, ..., 0) (len = 28)
LS1:
C1 = (0, 0, 0, ..., 0) = D1 = (0, 0, 0, ..., 0) (len = 28)
PC-2(C1) = (0, 0, 0, ..., 0) = PC-2(D1) = (0, 0, 0, ..., 0) (len = 24)
k1 = (0, 0, 0, ..., 0) (len = 48)

L0 = (0, 0, 0, ..., 0) = R0 = (0, 0, 0, ..., 0) (len = 32)

Função f:
E(R0) = (0, 0, 0, ..., 0) (len = 48)
i = XOR(E(R0), k1) = (0, 0, 0, ..., 0) (len = 48)

S1(i) = 14 = (1, 1, 1, 0) 
S2(i) = 15 = (1, 1, 1, 1)
S3(i) = 10 = (1, 0, 1, 0)
S4(i) = 07 = (0, 1, 1, 1)
S5(i) = 02 = (0, 0, 1, 0)
S6(i) = 12 = (1, 1, 0, 0)
S7(i) = 04 = (0, 1, 0, 0)
S8(i) = 13 = (1, 1, 0, 1)
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32
Sout = (1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1) (len = 32)
f = P(Sout) = (1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0) (len = 32)

XOR(L0, f) = (1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0)

Portanto, L1R1 = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0) (len = 64)

3.4) Mesmo processo realizado acima, porém com todos os bits iniciais do plaintext e da chave = 1.

3.5.1) Após IP, o bit 57 vai estar na posição 33. Consequentemente, será o primeiro bit de R0.
Com a expansão E no início da função f, o bit de valor '1' agora estará na posição 2 e na posição 48.
Assim, tal vetor de bits continuará igual após o XOR com a chave. Por fim, sabendo que temos dois 
bits de valor 1 separados por mais do que 5 bits, temos que 2 S-boxes terão inputs diferentes.

3.5.2) Pelos critérios de criação e design das S-boxes, temos que mudar 1 bit no input de uma S-box
deve implicar em uma mudança em pelo menos 2 bits do output. Portanto, como temos 2 bits alterados
no input, devemos ter uma mudança de no mínimo 4 bits.

3.5.3) 
S1 = 03 = (0, 0, 1, 1)
S2(i) = 15 = (1, 1, 1, 1) (igual na ocasião do exc anterior)
S3(i) = 10 = (1, 0, 1, 0) (igual na ocasião do exc anterior)
S4(i) = 07 = (0, 1, 1, 1) (igual na ocasião do exc anterior)
S5(i) = 02 = (0, 0, 1, 0) (igual na ocasião do exc anterior)
S6(i) = 12 = (1, 1, 0, 0) (igual na ocasião do exc anterior)
S7(i) = 04 = (0, 1, 0, 0) (igual na ocasião do exc anterior)
S8 = 01 = (0, 0, 0, 1)

        1, 2, 3, 4, 5, 6, 7, 8, 9, 10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32
Sout = (0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1)
f = P(Sout) = (1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0)

XOR(L0, f) = (1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0)

Portanto, L1R1        = (1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0)

3.5.4)
XOR = 6 bits foram alterados em apenas um round do DES



